"use strict";

import { Running, Cycling } from "./workout.js";

const form = document.querySelector(".form");
const containerWorkouts = document.querySelector(".workouts");
const inputType = document.querySelector(".form__input--type");
const inputDistance = document.querySelector(".form__input--distance");
const inputDuration = document.querySelector(".form__input--duration");
const inputCadence = document.querySelector(".form__input--cadence");
const inputElevation = document.querySelector(".form__input--elevation");
const btnReset = document.querySelector(".reset-btn");

class TrainingDiaryApp {
  _workouts = [];
  _myMap;
  _mapEvent;

  constructor() {
    inputType.addEventListener(
      "change",
      this._changingFormWhenSwitchingTypeOfTraining
    );
    form.addEventListener("submit", this._submittingForm.bind(this));
    containerWorkouts.addEventListener(
      "click",
      this._movingToSelectedWorkout.bind(this)
    );
    btnReset.addEventListener("click", this._reset);
  }

  initApp() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(this._loadMap.bind(this), () =>
        alert("–í—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é")
      );
    }
  }

  _loadMap(position) {
    const { latitude, longitude } = position.coords;
    const myCoordinates = [latitude, longitude];
    ymaps.ready(init.bind(this));
    function init() {
      this._myMap = new ymaps.Map("map", {
        center: myCoordinates,
        zoom: 13,
      });
      this._myMap.events.add("click", this._showForm.bind(this));
      this._getWorkoutsFromLocalStorage();
    }
  }

  _showForm(ev) {
    this._mapEvent = ev;
    form.classList.remove("hidden");
    inputDistance.focus();
  }

  _hiddenForm() {
    inputDistance.value =
      inputDuration.value =
      inputCadence.value =
      inputElevation.value =
        "";
    form.classList.add("hidden");
  }

  _submittingForm(ev) {
    ev.preventDefault();
    //–ø–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ mapEvent
    const coords = this._mapEvent.get("coords");
    //–ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∏—Ö
    const type = inputType.value;
    const distance = +inputDistance.value;
    const duration = +inputDuration.value;
    let workout;

    //—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const isAllPositive = (...inputs) => inputs.every((value) => value > 0);
    const isAllNumber = (...inputs) =>
      inputs.every((value) => Number.isFinite(value));

    if (type === "running") {
      const cadence = +inputCadence.value;
      if (
        !isAllNumber(distance, duration, cadence) ||
        !isAllPositive(distance, duration, cadence)
      ) {
        return alert("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ");
      }
      workout = new Running(coords, distance, duration, cadence);
    }

    if (type === "cycling") {
      const elevation = +inputElevation.value;
      if (
        !isAllNumber(distance, duration, elevation) ||
        !isAllPositive(distance, duration)
      ) {
        return alert("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ");
      }
      workout = new Cycling(coords, distance, duration, elevation);
    }
    //—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤
    this._workouts.push(workout);
    //—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ LocalStorage
    this._saveWorkoutToLocalStorage();
    //–æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
    this._renderingWorkoutOnMap(workout);
    //–æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤–∫–∏ –Ω–∞ sidebar
    this._renderingWorkoutOnSidebar(workout);
    //—Å–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞
    this._hiddenForm();
  }

  _renderingWorkoutOnMap(workout) {
    const tempBalloon = new ymaps.Placemark(
      workout.coord,
      {
        iconContent: `${workout.type === "running" ? "üèÉ‚Äç‚ôÇÔ∏è" : "üö¥‚Äç‚ôÄÔ∏è"} ${
          workout.description
        }`,
        balloonContentHeader: `${workout.type === "running" ? "üèÉ‚Äç‚ôÇÔ∏è" : "üö¥‚Äç‚ôÄÔ∏è"} ${
          workout.description
        }`,
        balloonContentBody: workout.contentBody,
      },
      {
        preset: "islands#darkGreenStretchyIcon",
      }
    );
    this._myMap.geoObjects.add(tempBalloon);
  }

  _renderingWorkoutOnSidebar(workout) {
    const html = `<li class="workout workout--${workout.type}" data-id="${
      workout.id
    }">
    <h2 class="workout__title">${workout.description}</h2>
    <div class="workout__details">
      <span class="workout__icon">${
        workout.type === "running" ? "üèÉ‚Äç‚ôÇÔ∏è" : "üö¥‚Äç‚ôÄÔ∏è"
      }</span>
      <span class="workout__value">${workout.distance}</span>
      <span class="workout__unit">–∫–º</span>
    </div>
    <div class="workout__details">
      <span class="workout__icon">‚è±</span>
      <span class="workout__value">${workout.duration}</span>
      <span class="workout__unit">–º–∏–Ω</span>
    </div>
    <div class="workout__details">
      <span class="workout__icon">‚ö°Ô∏è</span>
      <span class="workout__value">${
        workout.type === "running"
          ? workout.pace.toFixed(1)
          : workout.speed.toFixed(1)
      }</span>
      <span class="workout__unit">${
        workout.type === "running" ? "–º–∏–Ω/–∫–º" : "–∫–º/—á–∞—Å"
      }</span>
    </div>
    <div class="workout__details">
      <span class="workout__icon">${
        workout.type === "running" ? "ü¶∂üèº" : "‚õ∞"
      }</span>
      <span class="workout__value">${
        workout.type === "running" ? workout.cadence : workout.elevation
      }</span>
      <span class="workout__unit">${
        workout.type === "running" ? "—à–∞–≥" : "–º"
      }</span>
    </div>
  </li>`;
    form.insertAdjacentHTML("afterend", html);
  }

  _movingToSelectedWorkout(ev) {
    const workoutElement = ev.target.closest(".workout");
    if (!workoutElement) return;
    const workout = this._workouts.find(
      (value) => value.id == workoutElement.dataset.id
    );

    this._myMap.setCenter(workout.coord, 13, { duration: 800 });
  }

  _saveWorkoutToLocalStorage() {
    localStorage.setItem("workouts", JSON.stringify(this._workouts));
  }

  _getWorkoutsFromLocalStorage() {
    const data = JSON.parse(localStorage.getItem("workouts"));
    if (!data) return;
    this._workouts = data;
    this._workouts.forEach((workout) => {
      this._renderingWorkoutOnMap(workout);
      this._renderingWorkoutOnSidebar(workout);
    });
  }

  _changingFormWhenSwitchingTypeOfTraining() {
    inputCadence.closest(".form__row").classList.toggle("form__row--hidden");
    inputElevation.closest(".form__row").classList.toggle("form__row--hidden");
  }

  _reset() {
    localStorage.removeItem("workouts");
    location.reload();
  }
}

const app = new TrainingDiaryApp();
app.initApp();
/*
let myMap;
let mapEvent;

if (navigator.geolocation) {
  navigator.geolocation.getCurrentPosition(
    function (position) {
      const { latitude, longitude } = position.coords;
      const myCoordinates = [latitude, longitude];
      ymaps.ready(init);
      function init() {
        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã.
        myMap = new ymaps.Map("map", {
          // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã.
          // –ü–æ—Ä—è–¥–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ¬´—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞¬ª.
          // –ß—Ç–æ–±—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã –≤—Ä—É—á–Ω—É—é,
          // –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.
          center: myCoordinates,
          // –£—Ä–æ–≤–µ–Ω—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
          // –æ—Ç 0 (–≤–µ—Å—å –º–∏—Ä) –¥–æ 19.
          zoom: 13,
        });
        myMap.events.add("click", (ev) => {
          mapEvent = ev;
          form.classList.remove("hidden");
          inputDistance.focus();
        });
      }
    },
    function () {
      alert("–í—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é");
    }
  );
  form.addEventListener("submit", (ev) => {
    ev.preventDefault();
    inputDistance.value =
      inputDuration.value =
      inputCadence.value =
      inputElevation.value =
        "";
    inputDistance.focus();
    const coords = mapEvent.get("coords");
    const tempBalloon = new ymaps.Placemark(
      coords,
      {
        iconContent: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ‚Ññ 1",
        balloonContentHeader: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ‚Ññ 1",
        balloonContentBody: "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
      },
      {
        preset: "islands#darkGreenStretchyIcon",
      }
    );
    myMap.geoObjects.add(tempBalloon);
  });
  inputType.addEventListener("change", () => {
    inputCadence.closest(".form__row").classList.toggle("form__row--hidden");
    inputElevation.closest(".form__row").classList.toggle("form__row--hidden");
  });
}
*/
